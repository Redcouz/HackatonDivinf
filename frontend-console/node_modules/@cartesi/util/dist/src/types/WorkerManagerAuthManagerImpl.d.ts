import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface WorkerManagerAuthManagerImplInterface extends utils.Interface {
    functions: {
        "acceptJob()": FunctionFragment;
        "authorize(address,address)": FunctionFragment;
        "cancelHire(address)": FunctionFragment;
        "deauthorize(address,address)": FunctionFragment;
        "getOwner(address)": FunctionFragment;
        "getUser(address)": FunctionFragment;
        "hire(address)": FunctionFragment;
        "hireAndAuthorize(address,address)": FunctionFragment;
        "isAuthorized(address,address)": FunctionFragment;
        "isAvailable(address)": FunctionFragment;
        "isOwned(address)": FunctionFragment;
        "isPending(address)": FunctionFragment;
        "isRetired(address)": FunctionFragment;
        "rejectJob()": FunctionFragment;
        "retire(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "acceptJob" | "authorize" | "cancelHire" | "deauthorize" | "getOwner" | "getUser" | "hire" | "hireAndAuthorize" | "isAuthorized" | "isAvailable" | "isOwned" | "isPending" | "isRetired" | "rejectJob" | "retire"): FunctionFragment;
    encodeFunctionData(functionFragment: "acceptJob", values?: undefined): string;
    encodeFunctionData(functionFragment: "authorize", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "cancelHire", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "deauthorize", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getOwner", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getUser", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hire", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hireAndAuthorize", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isAuthorized", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isAvailable", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isOwned", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isPending", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isRetired", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "rejectJob", values?: undefined): string;
    encodeFunctionData(functionFragment: "retire", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "acceptJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelHire", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deauthorize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hire", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hireAndAuthorize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAuthorized", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAvailable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOwned", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPending", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRetired", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rejectJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "retire", data: BytesLike): Result;
    events: {
        "Authorization(address,address,address)": EventFragment;
        "Deauthorization(address,address,address)": EventFragment;
        "JobAccepted(address,address)": EventFragment;
        "JobOffer(address,address)": EventFragment;
        "JobRejected(address,address)": EventFragment;
        "Retired(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Authorization"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Deauthorization"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "JobAccepted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "JobOffer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "JobRejected"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Retired"): EventFragment;
}
export interface AuthorizationEventObject {
    user: string;
    worker: string;
    dapp: string;
}
export declare type AuthorizationEvent = TypedEvent<[
    string,
    string,
    string
], AuthorizationEventObject>;
export declare type AuthorizationEventFilter = TypedEventFilter<AuthorizationEvent>;
export interface DeauthorizationEventObject {
    user: string;
    worker: string;
    dapp: string;
}
export declare type DeauthorizationEvent = TypedEvent<[
    string,
    string,
    string
], DeauthorizationEventObject>;
export declare type DeauthorizationEventFilter = TypedEventFilter<DeauthorizationEvent>;
export interface JobAcceptedEventObject {
    worker: string;
    user: string;
}
export declare type JobAcceptedEvent = TypedEvent<[
    string,
    string
], JobAcceptedEventObject>;
export declare type JobAcceptedEventFilter = TypedEventFilter<JobAcceptedEvent>;
export interface JobOfferEventObject {
    worker: string;
    user: string;
}
export declare type JobOfferEvent = TypedEvent<[string, string], JobOfferEventObject>;
export declare type JobOfferEventFilter = TypedEventFilter<JobOfferEvent>;
export interface JobRejectedEventObject {
    worker: string;
    user: string;
}
export declare type JobRejectedEvent = TypedEvent<[
    string,
    string
], JobRejectedEventObject>;
export declare type JobRejectedEventFilter = TypedEventFilter<JobRejectedEvent>;
export interface RetiredEventObject {
    worker: string;
    user: string;
}
export declare type RetiredEvent = TypedEvent<[string, string], RetiredEventObject>;
export declare type RetiredEventFilter = TypedEventFilter<RetiredEvent>;
export interface WorkerManagerAuthManagerImpl extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WorkerManagerAuthManagerImplInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        acceptJob(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        authorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        cancelHire(_workerAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deauthorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getOwner(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getUser(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        hire(_workerAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hireAndAuthorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isAuthorized(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isAvailable(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isOwned(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isPending(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isRetired(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        rejectJob(overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        retire(_workerAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    acceptJob(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    authorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    cancelHire(_workerAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deauthorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getOwner(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getUser(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    hire(_workerAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hireAndAuthorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isAuthorized(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isAvailable(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isOwned(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isPending(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isRetired(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    rejectJob(overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    retire(_workerAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        acceptJob(overrides?: CallOverrides): Promise<void>;
        authorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        cancelHire(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        deauthorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        getOwner(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getUser(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        hire(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hireAndAuthorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        isAuthorized(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isAvailable(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isOwned(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isPending(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isRetired(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        rejectJob(overrides?: CallOverrides): Promise<void>;
        retire(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Authorization(address,address,address)"(user?: PromiseOrValue<string> | null, worker?: PromiseOrValue<string> | null, dapp?: PromiseOrValue<string> | null): AuthorizationEventFilter;
        Authorization(user?: PromiseOrValue<string> | null, worker?: PromiseOrValue<string> | null, dapp?: PromiseOrValue<string> | null): AuthorizationEventFilter;
        "Deauthorization(address,address,address)"(user?: PromiseOrValue<string> | null, worker?: PromiseOrValue<string> | null, dapp?: PromiseOrValue<string> | null): DeauthorizationEventFilter;
        Deauthorization(user?: PromiseOrValue<string> | null, worker?: PromiseOrValue<string> | null, dapp?: PromiseOrValue<string> | null): DeauthorizationEventFilter;
        "JobAccepted(address,address)"(worker?: PromiseOrValue<string> | null, user?: PromiseOrValue<string> | null): JobAcceptedEventFilter;
        JobAccepted(worker?: PromiseOrValue<string> | null, user?: PromiseOrValue<string> | null): JobAcceptedEventFilter;
        "JobOffer(address,address)"(worker?: PromiseOrValue<string> | null, user?: PromiseOrValue<string> | null): JobOfferEventFilter;
        JobOffer(worker?: PromiseOrValue<string> | null, user?: PromiseOrValue<string> | null): JobOfferEventFilter;
        "JobRejected(address,address)"(worker?: PromiseOrValue<string> | null, user?: PromiseOrValue<string> | null): JobRejectedEventFilter;
        JobRejected(worker?: PromiseOrValue<string> | null, user?: PromiseOrValue<string> | null): JobRejectedEventFilter;
        "Retired(address,address)"(worker?: PromiseOrValue<string> | null, user?: PromiseOrValue<string> | null): RetiredEventFilter;
        Retired(worker?: PromiseOrValue<string> | null, user?: PromiseOrValue<string> | null): RetiredEventFilter;
    };
    estimateGas: {
        acceptJob(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        authorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        cancelHire(_workerAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deauthorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getOwner(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getUser(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hire(_workerAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hireAndAuthorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isAuthorized(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isAvailable(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isOwned(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isPending(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isRetired(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        rejectJob(overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        retire(_workerAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        acceptJob(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        authorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        cancelHire(_workerAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deauthorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getOwner(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUser(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hire(_workerAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hireAndAuthorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isAuthorized(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAvailable(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isOwned(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isPending(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isRetired(_workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rejectJob(overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        retire(_workerAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
