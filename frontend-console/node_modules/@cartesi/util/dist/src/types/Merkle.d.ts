import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface MerkleInterface extends utils.Interface {
    functions: {
        "calculateRootFromPowerOfTwo(bytes32[])": FunctionFragment;
        "getLog2Floor(uint256)": FunctionFragment;
        "getPristineHash(uint8)": FunctionFragment;
        "getRoot(uint64,bytes8,bytes32[])": FunctionFragment;
        "getRootWithDrive(uint64,uint8,bytes32,bytes32[])": FunctionFragment;
        "isPowerOf2(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "calculateRootFromPowerOfTwo" | "getLog2Floor" | "getPristineHash" | "getRoot" | "getRootWithDrive" | "isPowerOf2"): FunctionFragment;
    encodeFunctionData(functionFragment: "calculateRootFromPowerOfTwo", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "getLog2Floor", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getPristineHash", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRoot", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "getRootWithDrive", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "isPowerOf2", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "calculateRootFromPowerOfTwo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLog2Floor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPristineHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRootWithDrive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPowerOf2", data: BytesLike): Result;
    events: {};
}
export interface Merkle extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MerkleInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        calculateRootFromPowerOfTwo(hashes: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[string]>;
        getLog2Floor(number: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        getPristineHash(_log2Size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getRoot(_position: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BytesLike>, proof: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[string]>;
        getRootWithDrive(_position: PromiseOrValue<BigNumberish>, _logOfSize: PromiseOrValue<BigNumberish>, _drive: PromiseOrValue<BytesLike>, siblings: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[string]>;
        isPowerOf2(number: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    calculateRootFromPowerOfTwo(hashes: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
    getLog2Floor(number: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    getPristineHash(_log2Size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getRoot(_position: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BytesLike>, proof: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
    getRootWithDrive(_position: PromiseOrValue<BigNumberish>, _logOfSize: PromiseOrValue<BigNumberish>, _drive: PromiseOrValue<BytesLike>, siblings: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
    isPowerOf2(number: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        calculateRootFromPowerOfTwo(hashes: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
        getLog2Floor(number: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        getPristineHash(_log2Size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getRoot(_position: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BytesLike>, proof: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
        getRootWithDrive(_position: PromiseOrValue<BigNumberish>, _logOfSize: PromiseOrValue<BigNumberish>, _drive: PromiseOrValue<BytesLike>, siblings: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
        isPowerOf2(number: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        calculateRootFromPowerOfTwo(hashes: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        getLog2Floor(number: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPristineHash(_log2Size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoot(_position: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BytesLike>, proof: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        getRootWithDrive(_position: PromiseOrValue<BigNumberish>, _logOfSize: PromiseOrValue<BigNumberish>, _drive: PromiseOrValue<BytesLike>, siblings: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        isPowerOf2(number: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        calculateRootFromPowerOfTwo(hashes: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getLog2Floor(number: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPristineHash(_log2Size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoot(_position: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BytesLike>, proof: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRootWithDrive(_position: PromiseOrValue<BigNumberish>, _logOfSize: PromiseOrValue<BigNumberish>, _drive: PromiseOrValue<BytesLike>, siblings: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isPowerOf2(number: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
