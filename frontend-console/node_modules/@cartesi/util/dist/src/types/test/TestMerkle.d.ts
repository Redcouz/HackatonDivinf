import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export interface TestMerkleInterface extends utils.Interface {
    functions: {
        "calculateRootFromPowerOfTwo(bytes32[])": FunctionFragment;
        "getEmptyTreeHashAtIndex(uint256)": FunctionFragment;
        "getHashOfWordAtIndex(bytes,uint256)": FunctionFragment;
        "getMerkleRootFromBytes(bytes,uint256)": FunctionFragment;
        "getRootAfterReplacementInDrive(uint256,uint256,uint256,bytes32,bytes32[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "calculateRootFromPowerOfTwo" | "getEmptyTreeHashAtIndex" | "getHashOfWordAtIndex" | "getMerkleRootFromBytes" | "getRootAfterReplacementInDrive"): FunctionFragment;
    encodeFunctionData(functionFragment: "calculateRootFromPowerOfTwo", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "getEmptyTreeHashAtIndex", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getHashOfWordAtIndex", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getMerkleRootFromBytes", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRootAfterReplacementInDrive", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>[]
    ]): string;
    decodeFunctionResult(functionFragment: "calculateRootFromPowerOfTwo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getEmptyTreeHashAtIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getHashOfWordAtIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMerkleRootFromBytes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRootAfterReplacementInDrive", data: BytesLike): Result;
    events: {};
}
export interface TestMerkle extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestMerkleInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        calculateRootFromPowerOfTwo(hashes: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[string]>;
        getEmptyTreeHashAtIndex(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getHashOfWordAtIndex(_data: PromiseOrValue<BytesLike>, _wordIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getMerkleRootFromBytes(_data: PromiseOrValue<BytesLike>, _log2Size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getRootAfterReplacementInDrive(_position: PromiseOrValue<BigNumberish>, _logSizeOfReplacement: PromiseOrValue<BigNumberish>, _logSizeOfFullDrive: PromiseOrValue<BigNumberish>, _replacement: PromiseOrValue<BytesLike>, siblings: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[string]>;
    };
    calculateRootFromPowerOfTwo(hashes: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
    getEmptyTreeHashAtIndex(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getHashOfWordAtIndex(_data: PromiseOrValue<BytesLike>, _wordIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getMerkleRootFromBytes(_data: PromiseOrValue<BytesLike>, _log2Size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getRootAfterReplacementInDrive(_position: PromiseOrValue<BigNumberish>, _logSizeOfReplacement: PromiseOrValue<BigNumberish>, _logSizeOfFullDrive: PromiseOrValue<BigNumberish>, _replacement: PromiseOrValue<BytesLike>, siblings: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
    callStatic: {
        calculateRootFromPowerOfTwo(hashes: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
        getEmptyTreeHashAtIndex(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getHashOfWordAtIndex(_data: PromiseOrValue<BytesLike>, _wordIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getMerkleRootFromBytes(_data: PromiseOrValue<BytesLike>, _log2Size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getRootAfterReplacementInDrive(_position: PromiseOrValue<BigNumberish>, _logSizeOfReplacement: PromiseOrValue<BigNumberish>, _logSizeOfFullDrive: PromiseOrValue<BigNumberish>, _replacement: PromiseOrValue<BytesLike>, siblings: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        calculateRootFromPowerOfTwo(hashes: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        getEmptyTreeHashAtIndex(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getHashOfWordAtIndex(_data: PromiseOrValue<BytesLike>, _wordIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getMerkleRootFromBytes(_data: PromiseOrValue<BytesLike>, _log2Size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRootAfterReplacementInDrive(_position: PromiseOrValue<BigNumberish>, _logSizeOfReplacement: PromiseOrValue<BigNumberish>, _logSizeOfFullDrive: PromiseOrValue<BigNumberish>, _replacement: PromiseOrValue<BytesLike>, siblings: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        calculateRootFromPowerOfTwo(hashes: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getEmptyTreeHashAtIndex(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getHashOfWordAtIndex(_data: PromiseOrValue<BytesLike>, _wordIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMerkleRootFromBytes(_data: PromiseOrValue<BytesLike>, _log2Size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRootAfterReplacementInDrive(_position: PromiseOrValue<BigNumberish>, _logSizeOfReplacement: PromiseOrValue<BigNumberish>, _logSizeOfFullDrive: PromiseOrValue<BigNumberish>, _replacement: PromiseOrValue<BytesLike>, siblings: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
