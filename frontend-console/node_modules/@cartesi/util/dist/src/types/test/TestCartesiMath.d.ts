import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export interface TestCartesiMathInterface extends utils.Interface {
    functions: {
        "clz(uint256)": FunctionFragment;
        "ctz(uint256)": FunctionFragment;
        "getLog2Floor(uint256)": FunctionFragment;
        "getLog2TableTimes1M(uint256)": FunctionFragment;
        "isPowerOf2(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "clz" | "ctz" | "getLog2Floor" | "getLog2TableTimes1M" | "isPowerOf2"): FunctionFragment;
    encodeFunctionData(functionFragment: "clz", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "ctz", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getLog2Floor", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getLog2TableTimes1M", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isPowerOf2", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "clz", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ctz", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLog2Floor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLog2TableTimes1M", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPowerOf2", data: BytesLike): Result;
    events: {};
}
export interface TestCartesiMath extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestCartesiMathInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        clz(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        ctz(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getLog2Floor(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getLog2TableTimes1M(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        isPowerOf2(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    clz(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    ctz(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getLog2Floor(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getLog2TableTimes1M(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    isPowerOf2(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        clz(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        ctz(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getLog2Floor(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getLog2TableTimes1M(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isPowerOf2(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        clz(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        ctz(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getLog2Floor(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getLog2TableTimes1M(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isPowerOf2(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        clz(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ctz(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getLog2Floor(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getLog2TableTimes1M(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isPowerOf2(_num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
