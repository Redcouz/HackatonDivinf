import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface WorkerAuthManagerInterface extends utils.Interface {
    functions: {
        "authorize(address,address)": FunctionFragment;
        "deauthorize(address,address)": FunctionFragment;
        "getOwner(address)": FunctionFragment;
        "isAuthorized(address,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "authorize" | "deauthorize" | "getOwner" | "isAuthorized"): FunctionFragment;
    encodeFunctionData(functionFragment: "authorize", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "deauthorize", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getOwner", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isAuthorized", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deauthorize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAuthorized", data: BytesLike): Result;
    events: {
        "Authorization(address,address,address)": EventFragment;
        "Deauthorization(address,address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Authorization"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Deauthorization"): EventFragment;
}
export interface AuthorizationEventObject {
    user: string;
    worker: string;
    dapp: string;
}
export declare type AuthorizationEvent = TypedEvent<[
    string,
    string,
    string
], AuthorizationEventObject>;
export declare type AuthorizationEventFilter = TypedEventFilter<AuthorizationEvent>;
export interface DeauthorizationEventObject {
    user: string;
    worker: string;
    dapp: string;
}
export declare type DeauthorizationEvent = TypedEvent<[
    string,
    string,
    string
], DeauthorizationEventObject>;
export declare type DeauthorizationEventFilter = TypedEventFilter<DeauthorizationEvent>;
export interface WorkerAuthManager extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WorkerAuthManagerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        authorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deauthorize(_workerAddress: PromiseOrValue<string>, _dappAddresses: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getOwner(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        isAuthorized(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    authorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deauthorize(_workerAddress: PromiseOrValue<string>, _dappAddresses: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getOwner(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    isAuthorized(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        authorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        deauthorize(_workerAddress: PromiseOrValue<string>, _dappAddresses: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        getOwner(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        isAuthorized(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "Authorization(address,address,address)"(user?: PromiseOrValue<string> | null, worker?: PromiseOrValue<string> | null, dapp?: PromiseOrValue<string> | null): AuthorizationEventFilter;
        Authorization(user?: PromiseOrValue<string> | null, worker?: PromiseOrValue<string> | null, dapp?: PromiseOrValue<string> | null): AuthorizationEventFilter;
        "Deauthorization(address,address,address)"(user?: PromiseOrValue<string> | null, worker?: PromiseOrValue<string> | null, dapp?: PromiseOrValue<string> | null): DeauthorizationEventFilter;
        Deauthorization(user?: PromiseOrValue<string> | null, worker?: PromiseOrValue<string> | null, dapp?: PromiseOrValue<string> | null): DeauthorizationEventFilter;
    };
    estimateGas: {
        authorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deauthorize(_workerAddress: PromiseOrValue<string>, _dappAddresses: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getOwner(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isAuthorized(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        authorize(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deauthorize(_workerAddress: PromiseOrValue<string>, _dappAddresses: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getOwner(workerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAuthorized(_workerAddress: PromiseOrValue<string>, _dappAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
