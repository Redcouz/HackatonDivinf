import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface InstantiatorV2Interface extends utils.Interface {
    functions: {
        "getNonce(uint256)": FunctionFragment;
        "getSubInstances(uint256,address)": FunctionFragment;
        "isActive(uint256)": FunctionFragment;
        "isConcerned(uint256,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getNonce" | "getSubInstances" | "isActive" | "isConcerned"): FunctionFragment;
    encodeFunctionData(functionFragment: "getNonce", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getSubInstances", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isActive", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isConcerned", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSubInstances", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isConcerned", data: BytesLike): Result;
    events: {};
}
export interface InstantiatorV2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: InstantiatorV2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getNonce(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getSubInstances(_index: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            string[],
            BigNumber[]
        ] & {
            _addresses: string[];
            _indices: BigNumber[];
        }>;
        isActive(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isConcerned(_index: PromiseOrValue<BigNumberish>, _user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    getNonce(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getSubInstances(_index: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        string[],
        BigNumber[]
    ] & {
        _addresses: string[];
        _indices: BigNumber[];
    }>;
    isActive(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isConcerned(_index: PromiseOrValue<BigNumberish>, _user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        getNonce(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getSubInstances(_index: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            string[],
            BigNumber[]
        ] & {
            _addresses: string[];
            _indices: BigNumber[];
        }>;
        isActive(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isConcerned(_index: PromiseOrValue<BigNumberish>, _user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        getNonce(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getSubInstances(_index: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isActive(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isConcerned(_index: PromiseOrValue<BigNumberish>, _user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getNonce(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSubInstances(_index: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isActive(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isConcerned(_index: PromiseOrValue<BigNumberish>, _user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
