import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface BitsManipulationInterface extends utils.Interface {
    functions: {
        "int32SignExtension(int32,uint32)": FunctionFragment;
        "uint32SwapEndian(uint32)": FunctionFragment;
        "uint64SignExtension(uint64,uint64)": FunctionFragment;
        "uint64SwapEndian(uint64)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "int32SignExtension" | "uint32SwapEndian" | "uint64SignExtension" | "uint64SwapEndian"): FunctionFragment;
    encodeFunctionData(functionFragment: "int32SignExtension", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "uint32SwapEndian", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "uint64SignExtension", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "uint64SwapEndian", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "int32SignExtension", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uint32SwapEndian", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uint64SignExtension", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uint64SwapEndian", data: BytesLike): Result;
    events: {};
}
export interface BitsManipulation extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: BitsManipulationInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        int32SignExtension(number: PromiseOrValue<BigNumberish>, wordSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        uint32SwapEndian(num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        uint64SignExtension(number: PromiseOrValue<BigNumberish>, wordSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        uint64SwapEndian(num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    int32SignExtension(number: PromiseOrValue<BigNumberish>, wordSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    uint32SwapEndian(num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    uint64SignExtension(number: PromiseOrValue<BigNumberish>, wordSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    uint64SwapEndian(num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        int32SignExtension(number: PromiseOrValue<BigNumberish>, wordSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        uint32SwapEndian(num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        uint64SignExtension(number: PromiseOrValue<BigNumberish>, wordSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        uint64SwapEndian(num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        int32SignExtension(number: PromiseOrValue<BigNumberish>, wordSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        uint32SwapEndian(num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        uint64SignExtension(number: PromiseOrValue<BigNumberish>, wordSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        uint64SwapEndian(num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        int32SignExtension(number: PromiseOrValue<BigNumberish>, wordSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        uint32SwapEndian(num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        uint64SignExtension(number: PromiseOrValue<BigNumberish>, wordSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        uint64SwapEndian(num: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
