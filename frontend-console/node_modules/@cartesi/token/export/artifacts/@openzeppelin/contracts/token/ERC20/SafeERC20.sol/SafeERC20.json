{
  "contractName": "SafeERC20",
  "sourceName": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol",
  "abi": [],
  "bytecode": "0x604c6025600b82828239805160001a6073141515601857fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820e24c9ee397180321f7782cdbfece0fd876286683255c24c0189243e9e6f9a9b70029",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820e24c9ee397180321f7782cdbfece0fd876286683255c24c0189243e9e6f9a9b70029",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
    "methods": {},
    "title": "SafeERC20"
  },
  "userdoc": {
    "methods": {}
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "15200",
        "executionCost": "100",
        "totalCost": "15300"
      },
      "internal": {
        "callOptionalReturn(contract IERC20,bytes memory)": "infinite",
        "safeApprove(contract IERC20,address,uint256)": "infinite",
        "safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
        "safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
        "safeTransfer(contract IERC20,address,uint256)": "infinite",
        "safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {}
  }
}