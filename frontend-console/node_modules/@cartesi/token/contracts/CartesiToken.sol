pragma solidity ^0.5.0;

import "@openzeppelin/contracts/token/ERC20/ERC20Mintable.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol";

contract CartesiToken is ERC20Mintable, ERC20Detailed{
    string public constant NAME = "Cartesi Token";
    string public constant SYMBOL = "CTSI";
    uint8 public constant DECIMALS = 18;
    uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(DECIMALS));

    uint256 mintLockTime;
    uint256 deployedDate;

    event LocktimeExteded(uint256 extendedBy, uint256 deadline);

    constructor()
        ERC20Detailed(NAME, SYMBOL, DECIMALS) public
    {
        deployedDate = now;
        _mint(msg.sender, INITIAL_SUPPLY);
    }

    function mint(address account, uint256 amount) public onlyMinter returns (bool) {
        if (now < SafeMath.add(deployedDate, mintLockTime)) {
            return false;
        }
        _mint(account, amount);
        return true;
    }

    function extendMintLockTime(uint256 _extraLockTime) public onlyMinter {
        mintLockTime = SafeMath.add(mintLockTime, _extraLockTime);

        emit LocktimeExteded(_extraLockTime, deployedDate + mintLockTime);
    }
}
