"use strict";
// Copyright 2022 Cartesi Pte. Ltd.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFacetCuts = exports.getFunctionSelectors = exports.productionFacetNames = exports.getRemoveFacetCut = exports.getReplaceFacetCut = exports.getAddFacetCut = exports.FacetCutAction = void 0;
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy
// of the license at http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
const hardhat_1 = require("hardhat");
var FacetCutAction;
(function (FacetCutAction) {
    FacetCutAction[FacetCutAction["Add"] = 0] = "Add";
    FacetCutAction[FacetCutAction["Replace"] = 1] = "Replace";
    FacetCutAction[FacetCutAction["Remove"] = 2] = "Remove";
})(FacetCutAction = exports.FacetCutAction || (exports.FacetCutAction = {}));
const getAddFacetCut = (facetAddress, functionSelectors) => {
    return {
        facetAddress,
        functionSelectors,
        action: FacetCutAction.Add,
    };
};
exports.getAddFacetCut = getAddFacetCut;
const getReplaceFacetCut = (facetAddress, functionSelectors) => {
    return {
        facetAddress,
        functionSelectors,
        action: FacetCutAction.Replace,
    };
};
exports.getReplaceFacetCut = getReplaceFacetCut;
const getRemoveFacetCut = (functionSelectors) => {
    return {
        facetAddress: hardhat_1.ethers.constants.AddressZero,
        functionSelectors,
        action: FacetCutAction.Remove,
    };
};
exports.getRemoveFacetCut = getRemoveFacetCut;
exports.productionFacetNames = [
    // essential facets
    "DiamondLoupeFacet",
    "OwnershipFacet",
    // rollups-related facets
    "ERC20PortalFacet",
    "ERC721PortalFacet",
    "EtherPortalFacet",
    "FeeManagerFacet",
    "InputFacet",
    "OutputFacet",
    "RollupsFacet",
    "ValidatorManagerFacet",
];
const getFunctionSelectors = (contract) => {
    let selectors = [];
    for (const signature in contract.interface.functions) {
        if (signature !== "init(bytes") {
            selectors.push(contract.interface.getSighash(signature));
        }
    }
    return selectors;
};
exports.getFunctionSelectors = getFunctionSelectors;
const getFacetCuts = async (facetNames) => {
    const facetCuts = [];
    const functionSelectors = {};
    for (const facetName of facetNames) {
        const facetDeployment = await hardhat_1.deployments.get(facetName);
        const facet = await hardhat_1.ethers.getContractAt(facetDeployment.abi, facetDeployment.address);
        const selectors = (0, exports.getFunctionSelectors)(facet);
        for (const selector of selectors) {
            if (selector in functionSelectors) {
                const otherFacetName = functionSelectors[selector];
                throw Error(`Tried to add function selector ${selector} ` +
                    `from ${facetName} and ${otherFacetName}`);
            }
            functionSelectors[selector] = facetName;
        }
        facetCuts.push((0, exports.getAddFacetCut)(facet.address, selectors));
    }
    return facetCuts;
};
exports.getFacetCuts = getFacetCuts;
