import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type { Foo2Facet, Foo2FacetInterface } from "../../../../contracts/test_helper/facets/Foo2Facet";
type Foo2FacetConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class Foo2Facet__factory extends ContractFactory {
    constructor(...args: Foo2FacetConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Foo2Facet>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Foo2Facet;
    connect(signer: Signer): Foo2Facet__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50607780601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063c298557814602d575b600080fd5b600a60405190815260200160405180910390f3fea26469706673582212202d70abb3995117c4c350758d9066cdbd4d9630f307936b361fa08796dc0aa73064736f6c634300080d0033";
    static readonly abi: {
        inputs: any[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): Foo2FacetInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Foo2Facet;
}
export {};
