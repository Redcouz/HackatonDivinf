import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { LibRollups, LibRollupsInterface } from "../../../contracts/libraries/LibRollups";
type LibRollupsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class LibRollups__factory extends ContractFactory {
    constructor(...args: LibRollupsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<LibRollups>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): LibRollups;
    connect(signer: Signer): LibRollups__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122037931b7a7a765b62a3eda86e3ed16ca1dff5949bf3344ac25376cd1ebf6a7c3264736f6c634300080d0033";
    static readonly abi: {
        anonymous: boolean;
        inputs: {
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
    }[];
    static createInterface(): LibRollupsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): LibRollups;
}
export {};
