import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface IERC721PortalInterface extends utils.Interface {
    functions: {
        "erc721Withdrawal(bytes)": FunctionFragment;
        "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "erc721Withdrawal" | "onERC721Received"): FunctionFragment;
    encodeFunctionData(functionFragment: "erc721Withdrawal", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "erc721Withdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    events: {
        "ERC721Received(address,address,address,uint256,bytes)": EventFragment;
        "ERC721Withdrawn(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ERC721Received"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ERC721Withdrawn"): EventFragment;
}
export interface ERC721ReceivedEventObject {
    ERC721: string;
    operator: string;
    sender: string;
    tokenId: BigNumber;
    data: string;
}
export type ERC721ReceivedEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string
], ERC721ReceivedEventObject>;
export type ERC721ReceivedEventFilter = TypedEventFilter<ERC721ReceivedEvent>;
export interface ERC721WithdrawnEventObject {
    ERC721: string;
    receiver: string;
    tokenId: BigNumber;
}
export type ERC721WithdrawnEvent = TypedEvent<[
    string,
    string,
    BigNumber
], ERC721WithdrawnEventObject>;
export type ERC721WithdrawnEventFilter = TypedEventFilter<ERC721WithdrawnEvent>;
export interface IERC721Portal extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IERC721PortalInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        erc721Withdrawal(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    erc721Withdrawal(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        erc721Withdrawal(_data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ERC721Received(address,address,address,uint256,bytes)"(ERC721?: null, operator?: null, sender?: null, tokenId?: null, data?: null): ERC721ReceivedEventFilter;
        ERC721Received(ERC721?: null, operator?: null, sender?: null, tokenId?: null, data?: null): ERC721ReceivedEventFilter;
        "ERC721Withdrawn(address,address,uint256)"(ERC721?: null, receiver?: null, tokenId?: null): ERC721WithdrawnEventFilter;
        ERC721Withdrawn(ERC721?: null, receiver?: null, tokenId?: null): ERC721WithdrawnEventFilter;
    };
    estimateGas: {
        erc721Withdrawal(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        erc721Withdrawal(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
