// Copyright 2022 Cartesi Pte. Ltd.

// SPDX-License-Identifier: Apache-2.0
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use
// this file except in compliance with the License. You may obtain a copy of the
// License at http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

/// @title Ether Portal facet
pragma solidity ^0.8.0;

import {IEtherPortal} from "../interfaces/IEtherPortal.sol";

import {LibInput} from "../libraries/LibInput.sol";

contract EtherPortalFacet is IEtherPortal {
    using LibInput for LibInput.DiamondStorage;

    bytes32 constant INPUT_HEADER = keccak256("Ether_Transfer");

    /// @notice deposit an amount of Ether in the portal and create Ether in L2
    /// @param _data information to be interpreted by L2
    /// @return hash of input generated by deposit
    function etherDeposit(
        bytes calldata _data
    ) public payable override returns (bytes32) {
        LibInput.DiamondStorage storage inputDS = LibInput.diamondStorage();
        bytes memory input = abi.encode(
            INPUT_HEADER,
            msg.sender,
            msg.value,
            _data
        );

        emit EtherDeposited(msg.sender, msg.value, _data);
        return inputDS.addInternalInput(input);
    }

    /// @notice withdraw an amount of Ether from the portal
    /// @param _data data with withdrawal information
    /// @dev can only be called by the Rollups contract
    function etherWithdrawal(
        bytes calldata _data
    ) public override returns (bool) {
        // Delegate calls preserve msg.sender, msg.value and address(this)
        require(msg.sender == address(this), "only itself");

        (address payable receiver, uint256 value) = abi.decode(
            _data,
            (address, uint256)
        );

        // We used to call receiver.transfer(value) but it's no
        // longer considered safe, as it assumes gas costs are
        // immutable, while in fact they are not.
        (bool success, ) = receiver.call{value: value}("");
        require(success, "transfer failed");

        emit EtherWithdrawn(receiver, value);

        return true;
    }
}
